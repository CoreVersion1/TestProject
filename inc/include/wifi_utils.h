#ifndef __RR_WIFI_UTILS_H__
#define __RR_WIFI_UTILS_H__

#ifdef __cplusplus
extern "C"
{
#endif

#include <fcntl.h>
#include "rda_headers.h"
#include <sys/socket.h>
#include <sys/un.h>
#include "rda_headers.h"

#define  KEY_MAX_LEN  (64)
#define  SECTION_MAX_LEN  (64)
#define  KEY_VALUE_MAX_LEN  (256)
#define  VERSIOIN_MAX_LEN  (32)
#define  LINE_MAX_LEN      (512)
#define  KEY_SYMBOL_MAX_LEN      (2)
#define  FILE_NAME_MAX_LEN       (128)
#define  FILE_PATH_MAX_LEN       (256)

#define MAC_MAX_LEN      (32)
#define COUNTRY_MAX_LEN  (16)
#define CHANNEL_MAX_LEN  (16)
#define SSID_MAX_LEN     (128)
#define PSK_MAX_LEN      (256)
#define PTK_MAX_LEN      (32)
#define MODEL_MAX_LEN    (64)
#define CMD_MAX_LEN      (1024)
#define WPA_SUPPLICANT_SOCKET_IDX  (100)
#define HOSTAPD_SOCKET_IDX         (200)
#define IP_MAX_LEN       (16)

#define COMMENT_SYMBOL      '#'
#define SEPERATOR_SYMBOL    '='
#define SECTION_START       '['
#define SECTION_END         ']'

/* basic patition */
#define PARTITION_DEFAULT_DIR   "/mnt/default"

/*shm*/
#define WIFI_ADAPTER_PROJ_ID   'w'

#define TRACE_TAG TRACE_WIFI
#define WIFI_DBOUT(x, ...) do{printf("%d,wifi," x ,rua_ms_now(),##__VA_ARGS__);fflush(stdout);}while(0)

#if 1
#define WIFI_API_LOGC UART_API_LOGC_TS
//#define WIFI_API_LOGE UART_API_LOGE_TS
#define WIFI_API_LOGE WIFI_DBOUT
#define WIFI_API_LOGW UART_API_LOGW_TS
#define WIFI_API_LOGN UART_API_LOGN_TS
#define WIFI_API_LOGI UART_API_LOGI_TS
#define WIFI_API_LOGD UART_API_LOGD_TS
#define WIFI_API_LOGS UART_API_LOGS_TS
#else
#define WIFI_API_LOGC WIFI_DBOUT
#define WIFI_API_LOGE WIFI_DBOUT
#define WIFI_API_LOGW WIFI_DBOUT
#define WIFI_API_LOGN WIFI_DBOUT
#define WIFI_API_LOGI WIFI_DBOUT
#define WIFI_API_LOGD WIFI_DBOUT
#define WIFI_API_LOGS WIFI_DBOUT

#endif


#ifndef MAC2STR
#define MAC2STR(a) (a)[0], (a)[1], (a)[2], (a)[3], (a)[4], (a)[5]
#define MACSTR "%02x:%02x:%02x:%02x:%02x:%02x"

/*
 * Compact form for string representation of MAC address
 * To be used, e.g., for constructing dbus paths for P2P Devices
 */
#define COMPACT_MACSTR "%02x%02x%02x%02x%02x%02x"
#endif

#define WIFI_MSG_VCTO_LOCK_DELAY_MS          (1)
#define WIFI_MSG_VCTO_MODE_WAIT_ARAE         (0x1)
#define WIFI_MSG_VCTO_MODE_COVER_OLD_DATA    (0x2)

enum TRIM_MODE {
    TRIM_LIFT  = 1, /* trim left space chars*/
    TRIM_RIGHT = 2, /* trim right space chars */
    TRIM_SPACE = 3, /* trim left and right space chars */
};

typedef struct _key {
    char key[KEY_MAX_LEN];
    char key_value[KEY_VALUE_MAX_LEN];
} key_s;

typedef struct _option {
    key_s    key;
    struct  _option *next;
} option_s;

typedef struct _section {
    char    section[SECTION_MAX_LEN];
    option_s  *option;
    struct  _section *next;
} section_s;

typedef struct _wifi_config {
    section_s  *section;
    pthread_mutex_t mutex;
} wifi_config_s;
//unix socket
typedef struct _wpa_ctrl_s {
    int s;
    struct sockaddr_un local;
    struct sockaddr_un dest;
} wpa_ctrl_s;

typedef struct _wifi_msg_vector_s {
    unsigned int element_max_num;
    unsigned int element_size;
    unsigned int flag;
    pthread_mutex_t lock;
    struct rua_fifo fifo;
    void *data;
} wifi_msg_vector_s;

int wifi_file_exists(const char *filename);
int wifi_file_readable(const char *filename);
int wifi_file_writable(const char *filename);
int wifi_is_file(const char *filename);
int wifi_is_dir(const char *filename);
off_t wifi_file_size(const char *filename);
char *wifi_file_trim_string(char *str);
char *wifi_file_trim_space_string(char *string, int mode);
int wifi_is_empty_string(const char *str);
int wifi_file_is_badline(const char *line);
int wifi_file_get_file_name_from_path(char *path, const char *suffix,
                                      char *name, const int name_len);
void *wifi_file_load_data(const char *fn, unsigned *_sz);
int wifi_file_get_file_path(const char *dir_p, const char *file_n, char *file_p,
                            int file_p_len);
int wifi_file_diff(const char *filename1, const char *filename2);
int wifi_is_exist_syscmd(const char *p);
int wifi_file_iconv(const char *ff, const char *ft, const char *fin,
                    const char *fout);
int wifi_file_copy(const char *dst_file, const char *src_file);
int wifi_file_apend_string(const char *file_path, const char *string);
int wifi_file_replace_string(const char *file_path, const char *old_str,
                             const char *new_str);
int wifi_file_put_key_value(const char *filename, const char *key,
                            const char *key_val);

/// @brief Escapement \ and ", if you want to save ssid or psk to a file you
///        need to escape it first.
/// @param buf ssid or psk
/// @param buf_size len of buf
void wifi_escape_string(char *buf, unsigned int buf_size);

/// @brief wifi.conf is generated by rriot, and the ssid and psk saved to the
///        file are escaped, so ssid and psk need to be unescaped before use
/// @param buf ssid or psk
/// @param buf_size len of buf
void wifi_unescape_string(char *buf, int buf_size);
int wifi_file_add_section(wifi_config_s *cfg, const char *section);
int wifi_file_add_option(wifi_config_s *cfg, const char *section, key_s *key);
section_s *wifi_file_get_section(wifi_config_s *cfg, const char *section);
option_s *wifi_file_get_option(wifi_config_s *cfg, const char *section);
char *wifi_file_get_key_value(wifi_config_s *cfg, const char *section,
                              const char *key);
int wifi_file_remove_section(wifi_config_s *cfg, const char *section);
int wifi_file_remove_option(wifi_config_s *cfg, const char *section,
                            const char *key);
int wifi_file_read_config_file(const char *filename, wifi_config_s *cfg);
int wifi_file_write_config_file(wifi_config_s *cfg, const char *filename);
void wifi_file_destroy_config(wifi_config_s **cfg);
void wifi_file_print_config(wifi_config_s *cfg);
wifi_config_s *wifi_file_init_config_handler(void);
int wifi_file_get_config(const char *filename, const char *key, char *key_val,
                         int key_val_len);
int wifi_file_get_device_config_country(char *country, int country_len);
int wifi_file_get_device_config_wifiplan(char *wifiplan, int wifiplan_len);
int wifi_file_get_device_config_mac(char *mac, int mac_len);
int wifi_file_get_device_config_model(char *model, int model_len);
int wifi_get_sensitive_log_flag(void);
int wifi_get_model_version(void);
int wifi_get_enable_flag(void);
int wifi_system(const char *cmd);
int wifi_daemonize(const char *pid_file);
int wifi_get_wpa_status(const char *filter_key,
                        char *key_val, int key_val_len);
int wifi_get_connect_ssid(char *conn_ssid, size_t conn_ssid_len);
int wifi_is_wpa_running(void);
int wifi_is_udhcpc_running(void);
int wifi_kill_udhcpc(void);
int wifi_hex2num(char c);
int wifi_hex2byte(const char *hex);
size_t wifi_wpa_str_decode(uint8_t *buf, size_t maxlen, const char *str);
wpa_ctrl_s *wifi_wpa_ctrl_open(const char *ctrl_path, int index);
void wifi_wpa_ctrl_close(wpa_ctrl_s *ctrl);
int wifi_wpa_ctrl_request(wpa_ctrl_s *ctrl, const char *cmd, size_t cmd_len,
                          char *reply, size_t *reply_len,
                          void (*msg_cb)(char *msg, size_t len));
wifi_msg_vector_s *wifi_msg_vector_create(size_t element_size, int max_num,
        unsigned int flag);
void wifi_msg_vector_destory(wifi_msg_vector_s *pmsgv);
int wifi_msg_vector_write(wifi_msg_vector_s *pmsgv, void *pdata);
int wifi_msg_vector_read(wifi_msg_vector_s *pmsgv, void *pdata);
void wifi_msg_vector_clean(wifi_msg_vector_s *pmsgv);

/// @brief Encrypting passwords for wpa_supplicant.conf
/// @param ssid wifi name
/// @param passphrase password
/// @return 0 is success, otherwise is fail
int wifi_pbkdf2_sha1(const char* ssid, char* passphrase);

/// @brief Determining whether a program has run
/// @param program_name program name
/// @return 0 is running, otherwise is not runnning
int is_program_running(const char* program_name);

/// @brief get value by field from wifi.conf only
/// @param field like ssid, psk, cfg_by
const char* wifi_conf_get_value(const char* field);

/// @brief get devices serial number
/// @param sn, serial number
/// @param len, length of serial number
/// @return 0 is success, otherwise is fail
int wifi_get_sn(char *sn, int sn_len);

#ifdef __cplusplus
}
#endif
#endif//__RR_WIFI_UTILS_H__

